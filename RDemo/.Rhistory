Revo.version Revo.home()
RevoScaleR::RxComputeContext
RevoScaleR::RxComputeContext()
rxGetComputeContext()
data_file = "data/reg-data.csv" data = read.csv(data_file, header = TRUE) head(data) model = lm(output ~ input, data = data) summary(model)
titanic_data = read.csv(titanic_file) head(titanic_data)
titanic_file = "data/titanic.csv" titanic_data = read.csv(titanic_file) head(titanic_data)
names(titanic_data)
str(titanic_data)
rm(list = ls(all = TRUE))
titanic.csv = "data/titanic.csv"
titanic.data = read.csv(titanic.csv)
head(titanic.data)
titanic.xdf = "data/titanic.xdf"
rxImport(titanic.csv, titanic.xdf, colClasses = col_classes, overwrite = TRUE, append = append)
rxImport(titanic.csv, titanic.xdf,  overwrite = TRUE, append = append)
rxImport(titanic.csv, titanic.xdf,  overwrite = TRUE)
titanic.xdata <- RxXdfData(titanic.xdf)
head(titanic.data)
rxSummary( ~ Survived, titanic.xdata)
str(titanic.data)
col_classes <- c(   'PassengerId' = "integer",   'Survived' = "factor",   'Pclass' = "factor",   'Name' = "character",   'Sex' = "factor",   'Age' = "numeric",   'SibSp' = "integer",   'Parch' = "integer",   'Fare' = "numeric",   'Cabin' = 'character',   'Embarked' = 'factor' ) titanic.data = read.csv(titanic.csv, colClasses = col_classes) head(titanic.data)
str(titanic.data)
titanic.xdf = "data/titanic.xdf" rxImport(titanic.csv, titanic.xdf, overwrite = TRUE, colClasses = col_classes) titanic.xdata <- RxXdfData(titanic.xdf) rxSummary( ~ Survived, titanic.xdata)
rm(list = ls(all = TRUE))
titanic.csv = "data/titanic.csv" col_classes <- c(   'PassengerId' = "integer",   'Survived' = "factor",   'Pclass' = "factor",   'Name' = "character",   'Sex' = "factor",   'Age' = "numeric",   'SibSp' = "integer",   'Parch' = "integer",   'Fare' = "numeric",   'Cabin' = 'character',   'Embarked' = 'factor' )
titanic.xdf = "data/titanic.xdf" rxImport(titanic.csv, titanic.xdf, overwrite = TRUE, colClasses = col_classes)
titanic.csv = "data/titanic.csv" col_classes <- c(   'PassengerId' = "integer",   'Survived' = "factor",   'Pclass' = "factor",   'Name' = "character",   'Sex' = "factor",   'Age' = "numeric",   'SibSp' = "integer",   'Parch' = "integer",   'Fare' = "numeric",   'Ticket' = "character",   'Cabin' = 'character',   'Embarked' = 'factor' )
titanic.xdf = "data/titanic.xdf" rxImport(titanic.csv, titanic.xdf, overwrite = TRUE, colClasses = col_classes) titanic.xdata <- RxXdfData(titanic.xdf) rxSummary( ~ Survived, titanic.xdata)
titanic.xdf = "data/titanic.xdf"
rxImport(titanic.csv, titanic.xdf, overwrite = TRUE, colClasses = col_classes)
rm(list = ls(all = TRUE))
titanic.csv = "data/titanic.csv" col_classes <- c(   'PassengerId' = "integer",   'Survived' = "factor",   'Pclass' = "factor",   'Name' = "character",   'Sex' = "factor",   'Age' = "numeric",   'SibSp' = "integer",   'Parch' = "integer",   'Ticket' = "character",   'Fare' = "numeric",   'Cabin' = 'character',   'Embarked' = 'factor' )
titanic.data = read.csv(titanic.csv, colClasses = col_classes) head(titanic.data) str(titanic.data)
titanic.xdf = "data/titanic.xdf"
rxImport(titanic.csv, titanic.xdf, overwrite = TRUE, colClasses = col_classes)
rxImport(titanic.csv, titanic.xdf, overwrite = TRUE)
rm(list = ls(all = TRUE))
titanic.csv = "data/titanic.csv" col_classes <- c(   'PassengerId' = "integer",   'Survived' = "factor",   'Pclass' = "factor",   'Name' = "character",   'Sex' = "factor",   'Age' = "numeric",   'SibSp' = "integer",   'Parch' = "integer",   'Ticket' = "character",   'Fare' = "numeric",   'Cabin' = "character",   'Embarked' = "factor" )
titanic.xdf = "data/titanic.xdf"
rxImport(titanic.csv, titanic.xdf, overwrite = TRUE, colClasses = col_classes)
rm(list = ls(all = TRUE))
rm(list = ls(all = TRUE)) titanic_csv = "data/titanic.csv" titanic_data = read.csv(titanic_csv, colClasses = col_classes) head(titanic_data) str(titanic_data) titanic_xdf = "data/titanic.xdf" rxImport(titanic_csv, titanic_xdf, overwrite = TRUE) titanic.xdata <- RxXdfData(titanic_xdf)
rxSummary( ~ Survived, titanic_xdata)
rm(list = ls(all = TRUE)) titanic_csv = "data/titanic.csv" titanic_data = read.csv(titanic_csv, colClasses = col_classes) head(titanic_data) str(titanic_data) titanic_xdf = "data/titanic.xdf" rxImport(titanic_csv, titanic_xdf, overwrite = TRUE) titanic_xdata <- RxXdfData(titanic_xdf) rxSummary( ~ Survived, titanic_xdata)
rm(list = ls(all = TRUE))
titanic_csv = "data/titanic.csv" titanic_data = read.csv(titanic_csv, colClasses = col_classes) head(titanic_data) str(titanic_data)
rm(list = ls(all = TRUE)) titanic_csv = "data/titanic.csv" titanic_data = read.csv(titanic_csv) head(titanic_data) str(titanic_data)
titanic_xdf = "data/titanic.xdf" rxImport(titanic_csv, titanic_xdf, overwrite = TRUE) titanic_xdata <- RxXdfData(titanic_xdf) rxSummary( ~ Survived, titanic_xdata)
rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 50)
head(titanic_xdata, getVarInfo = TRUE, numRows = 50)
head(titanic_xdata)
rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 50)
str(titanic_xdata)
rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 5)
rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 0)
rxDataStep(titanic_xdata, titanic_xdata,   transforms = list(     Survived = as.factor(Survived),     Survived = factor(Survived, levels = 0:1, labels = c('No', 'Yes')),     Pclass = as.factor(Pclass),     ),   overwrite = TRUE)
rxDataStep(titanic_xdata, titanic_xdata,   transforms = list(     Survived = as.factor(Survived),     Survived = factor(Survived, levels = 0:1, labels = c('No', 'Yes')),     Pclass = as.factor(Pclass)     ),   overwrite = TRUE)
rxDataStep(titanic_xdata, titanic_xdata,   transforms = list(     Survived = as.factor(Survived),     Survived = factor(Survived, levels = 0:1, labels = c('No', 'Yes')),     Pclass = as.factor(Pclass)     ),   overwrite = TRUE)
rxDataStep(titanic_xdata, titanic_xdata,   transforms = list(     Survived = as.factor(Survived),     Survived = factor(Survived, levels = 0:1, labels = c('No', 'Yes'))     ),   overwrite = TRUE)
rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 0)
rxDataStep(titanic_xdata, titanic_xdata,   transforms = list(     Survived = as.factor(Survived),     Survived = factor(Survived, levels = 0:1, labels = c('No', 'Yes'))     ),   overwrite = TRUE)
rxDataStep(titanic_xdata, titanic_xdata,   transforms = list(     Survived = as.factor(Survived),     Survived = factor(Survived, levels = 0:1, labels = c('No', 'Yes'))     ),   overwrite = TRUE)
rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 0)
rm(list = ls(all = TRUE))
titanic_csv = "data/titanic.csv" titanic_data = read.csv(titanic_csv) head(titanic_data) str(titanic_data)
titanic_xdf = "data/titanic.xdf" rxImport(titanic_csv, titanic_xdf, overwrite = TRUE) titanic_xdata <- RxXdfData(titanic_xdf) rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 0)
str(titanic_data)
names(titanic_data)
titanic_xdf = "data/titanic.xdf" rxImport(titanic_csv, titanic_xdf, overwrite = TRUE, colClasses = col_names)
col_names = names(titanic_data)
rxImport(titanic_csv, titanic_xdf, overwrite = TRUE, colClasses = col_names)
rxImport(titanic_csv, titanic_xdf, overwrite = TRUE, colClasses = c('PassengerId'="integer"))
titanic_xdata <- RxXdfData(titanic_xdf) rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 0)
titanic_xdf = "data/titanic.xdf" rxImport(titanic_csv, titanic_xdf, overwrite = TRUE, colClasses = c('PassengerId'="factor")) titanic_xdata <- RxXdfData(titanic_xdf) rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 0)
titanic_xdf = "data/titanic.xdf" rxImport(titanic_csv, titanic_xdf, overwrite = TRUE) titanic_xdata <- RxXdfData(titanic_xdf) rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 0)
titanic_xdf = "data/titanic.xdf" rxImport(titanic_csv, titanic_xdf, overwrite = TRUE) titanic_xdata <- RxXdfData(titanic_xdf) rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 0)
rm(list = ls(all = TRUE))
titanic_csv = "data/titanic.csv" titanic_data = read.csv(titanic_csv) head(titanic_data) str(titanic_data)
titanic_xdf = "data/titanic.xdf" rxImport(titanic_csv, titanic_xdf, overwrite = TRUE) titanic_xdata <- RxXdfData(titanic_xdf) rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 0)
rxSummary( ~ Survived, titanic_xdata)
rxDataStep(titanic_xdata, titanic_xdata,   transforms = list(     Survived = as.factor(Survived),     Survived = factor(Survived, levels = 0:1, labels = c('No', 'Yes'))     ),   overwrite = TRUE)
rxDataStep(titanic_xdata, titanic_xdata,   transforms = list(     Survived = as.factor(Survived),     Survived = factor(Survived, levels = 0:1, labels = c('No', 'Yes'))     ),   overwrite = TRUE)
rxDataStep(titanic_xdata, titanic_xdata,   transforms = list(     Survived = as.factor(Survived)     ),   overwrite = TRUE)
rxDataStep(titanic_xdata, titanic_xdata,   transforms = list(     Survived = as.factor(Survived)     ),   overwrite = TRUE)
titanic_xdf = "data/titanic.xdf" rxImport(titanic_csv, titanic_xdf, overwrite = TRUE) titanic_xdata <- RxXdfData(titanic_xdf) rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 1)
col_classes = c(             "PassengerId" = "integer",             "Survived" = "factor",             "Pclass" = "factor",             "Sex" = "factor",             "Age" = "numeric",             "SibSp" = "integer",             "Parch" = "integer",             "Ticket" = "character",             "Fare" = "numeric",             "Cabin" = "character",             "Embarked" = "factor"             ) titanic_data = read.csv(titanic_csv, colClasses = col_classes) head(titanic_data) str(titanic_data)
titanic_xdf = "data/titanic.xdf" rxImport(titanic_csv, titanic_xdf, colClasses = col_classes, overwrite = TRUE) titanic_xdata <- RxXdfData(titanic_xdf) rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 1)
rxSummary( ~ Survived, titanic_xdata)
rxDataStep(titanic_xdata, titanic_xdata,   transforms = list(     Survived = factor(Survived, levels = 0:1, labels = c('No', 'Yes')),     FareToAgeRatio = Fare/Age     ),   overwrite = TRUE) rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 1)
rxDataStep(titanic_xdata, titanic_xdata,            transformFunc = prepare_data,            overwrite = TRUE) rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 1)
prepare_data <- function(data) {     selected_variables = c('Age', 'Sex', 'Fare', 'Pclass', 'Survived')     data = data[selected_variables]     return(data) }
rxDataStep(titanic_xdata, titanic_xdata,            transformFunc = prepare_data,            overwrite = TRUE) rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 1)
prepare_data <- function(data) {     selected_variables = c('Age', 'Sex', 'Fare', 'Pclass', 'Survived')     data = data[selected_variables]     data } rxDataStep(titanic_xdata, titanic_xdata,            transformFunc = prepare_data,            overwrite = TRUE) rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 1)
head(prepare_data(titanic_data))
rm(list = ls(all = TRUE))
titanic_csv = "data/titanic.csv" col_classes = c(             "PassengerId" = "integer",             "Survived" = "factor",             "Pclass" = "factor",             "Sex" = "factor",             "Age" = "numeric",             "SibSp" = "integer",             "Parch" = "integer",             "Ticket" = "character",             "Fare" = "numeric",             "Cabin" = "character",             "Embarked" = "factor"             ) titanic_data = read.csv(titanic_csv, colClasses = col_classes) head(titanic_data) str(titanic_data)
titanic_xdf = "data/titanic.xdf" rxImport(titanic_csv, titanic_xdf, colClasses = col_classes, overwrite = TRUE) titanic_xdata <- RxXdfData(titanic_xdf) rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 2)
rxSummary( ~ Survived, titanic_xdata)
rxDataStep(titanic_xdata, titanic_xdata,   transforms = list(     Survived = factor(Survived, levels = 0:1, labels = c('No', 'Yes')),     FareToAgeRatio = Fare/Age     ),   overwrite = TRUE)
rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 1)
rxDataStep(titanic_xdata, titanic_xdata,            transformFunc = prepare_data,            overwrite = TRUE)
prepare_data <- function(data) {     selected_variables = c('Age', 'Sex', 'Fare', 'Pclass', 'Survived')     data = data[selected_variables]     data }
rxDataStep(titanic_xdata, titanic_xdata,            transformFunc = prepare_data,            overwrite = TRUE)
rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 1)
head(rxDataStep(titanic_xdata, titanic_xdata,            transformFunc = prepare_data,            overwrite = TRUE))
prepare_data <- function(data) {     selected_variables = c('Age', 'Sex', 'Fare', 'Pclass', 'Survived')     data = data[selected_variables]     return(data) }
prepare_data <- function(data) {     selected_variables = c('Age', 'Sex', 'Fare', 'Pclass', 'Survived')     data = data[selected_variables]     return(data) }
rxDataStep(titanic_xdata, titanic_xdata,            transformFunc = prepare_data,            overwrite = TRUE)
rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 1)
head(is.na(titanic_data$Age))
head(data$Age[is.na(titanic_data$Age)])
head(titanic_data$Age[is.na(titanic_data$Age)])
rxSummary(~ Age, titanic_xdata)
prepare_data <- function(data) {     age_mean = mean(data$Age, na.rm = TRUE)     data$Age[is.na(data$Age)] <- age_mean     return(data) }
rxDataStep(titanic_xdata, titanic_xdata,            transformFunc = prepare_data,            overwrite = TRUE) rxSummary( ~ Age, titanic_xdata)
genVsSurv = rxSummary( ~ Survival:Sex, titanic_xdata)
genVsSurv = rxSummary( ~ Survived:Sex, titanic_xdata)
genVsSurv
levelplot(prop.table(genVsSurv, 2), cuts = 10, xlab = "", ylab = "",           main = "Distribution of taxis by day of week")
levelplot(genVsSurv, cuts = 10, xlab = "", ylab = "",           main = "Distribution of taxis by day of week")
genVsSurv = rxSummary( ~ Survived:Sex, titanic_xdata) rxs2 <- tidyr::spread(genVsSurv$categorical[[1]], key = 'pickup_hour', value = 'Counts') row.names(rxs2) <- rxs2[, 1] rxs2 <- as.matrix(rxs2[, -1]) rxs2 levelplot(prop.table(rxs2, 2), cuts = 10, xlab = "", ylab = "",           main = "Distribution of taxis by day of week")
genVsSurv = rxSummary( ~ Survived:Sex, titanic_xdata) rxs2 <- tidyr::spread(genVsSurv$categorical[[1]], key = 'Survived', value = 'Counts') row.names(rxs2) <- rxs2[, 1] rxs2 <- as.matrix(rxs2[, -1]) rxs2 levelplot(prop.table(rxs2, 2), cuts = 10, xlab = "", ylab = "",           main = "Distribution of taxis by day of week")
genVsSurv = rxSummary( ~ Survived:Sex, titanic_xdata) rxs2 <- tidyr::spread(genVsSurv$categorical[[1]], key = 'Sex', value = 'Counts') row.names(rxs2) <- rxs2[, 1] rxs2 <- as.matrix(rxs2[, -1]) rxs2 levelplot(prop.table(rxs2, 2), cuts = 10, xlab = "", ylab = "",           main = "Distribution of taxis by day of week")
genVsSurv = rxSummary( ~ Survived:Sex, titanic_xdata) rxs2 <- tidyr::spread(genVsSurv$categorical[[1]], key = 'Sex', value = 'Counts') row.names(rxs2) <- rxs2[, 1] rxs2 <- as.matrix(rxs2[, -1]) rxs2 levelplot(prop.table(rxs2, 2), cuts = 20, xlab = "", ylab = "",           main = "Distribution of taxis by day of week")
str(rxs2)
class(rxs2)
rxs2
levelplot(prop.table(rxs2, 2), xlab = "", ylab = "",           main = "Distribution of taxis by day of week")
levelplot(prop.table(rxs2, 2),           main = "Distribution of taxis by day of week")
rxsm = rxSummary( ~ Survived:Sex, titanic_xdata) genVsSurv <- tidyr::spread(rxsm$categorical[[1]], key = 'Sex', value = 'Counts') row.names(genVsSurv) <- rxs2[, 1] genVsSurv <- as.matrix(genVsSurv[, -1]) genVsSurv levelplot(prop.table(genVsSurv, 2), xlab = "Survived", ylab = "Gender",           main = "Survived vs. Gender")
decision_tree <- rxDTree(Survived ~ Age + Sex + Fare + Pclass, data = titanic_xdata, pruneCp = "auto", reportProgress = 0))
decision_tree <- rxDTree(Survived ~ Age + Sex + Fare + Pclass,                           data = titanic_xdata, pruneCp = "auto", reportProgress = 0)
rxSummary(decision_tree)
summary(decision_tree)
class(decision_tree)
plot(decision_tree)
prp(rxAddInheritance(rx.tree)) fancyRpartPlot(rxAddInheritance(rx.tree))
library(rpart) # Popular decision tree algorithm library(rattle) # Fancy tree plot library(rpart.plot) # Enhanced tree plots library(RColorBrewer) # Color selection for fancy tree plot library(party) # Alternative decision tree algorithm library(partykit) # Convert rpart object to BinaryTree library(caret) # Just a data source for this script
install.packages(c('rpart','rattle','rpart.plot','RColorBrewer','party','partykit','caret'))
library(rpart) # Popular decision tree algorithm library(rattle) # Fancy tree plot library(rpart.plot) # Enhanced tree plots library(RColorBrewer) # Color selection for fancy tree plot library(party) # Alternative decision tree algorithm library(partykit) # Convert rpart object to BinaryTree library(caret) # Just a data source for this script
library(rpart) # Popular decision tree algorithm library(rattle) # Fancy tree plot library(rpart.plot) # Enhanced tree plots library(RColorBrewer) # Color selection for fancy tree plot library(party) # Alternative decision tree algorithm library(partykit) # Convert rpart object to BinaryTree library(caret) # Just a data source for this script
rx_decision_tree <- rxDTree(Survived ~ Age + Sex + Fare + Pclass,                           data = titanic_xdata, pruneCp = "auto", reportProgress = 0)
prp(rxAddInheritance(rx_decision_tree)) fancyRpartPlot(rxAddInheritance(rx_decision_tree))
titanic_csv = "data/titanic.csv" col_classes = c(             "PassengerId" = "integer",             "Survived" = "factor",             "Pclass" = "factor",             "Sex" = "factor",             "Age" = "numeric",             "SibSp" = "integer",             "Parch" = "integer",             "Ticket" = "character",             "Fare" = "numeric",             "Cabin" = "character",             "Embarked" = "factor"             )
titanic_data = read.csv(titanic_csv, colClasses = col_classes) head(titanic_data) str(titanic_data)
titanic_xdf = "data/titanic.xdf" rxImport(titanic_csv, titanic_xdf, colClasses = col_classes, overwrite = TRUE) titanic_xdata <- RxXdfData(titanic_xdf) rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 1) rxSummary( ~ Survived, titanic_xdata)
rxDataStep(titanic_xdata, titanic_xdata,   transforms = list(     Survived = factor(Survived, levels = 0:1, labels = c('No', 'Yes')),     FareToAgeRatio = Fare/Age     ),   overwrite = TRUE)
rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 1)
rxSummary(~ Age, titanic_xdata)
prepare_data <- function(data) {     age_mean = mean(data$Age, na.rm = TRUE)     data$Age[is.na(data$Age)] <- age_mean     return(data)
}
rxDataStep(titanic_xdata, titanic_xdata,            transformFunc = prepare_data,            overwrite = TRUE)
rxSummary( ~ Age, titanic_xdata)
rx_decision_tree <- rxDTree(Survived ~ Age + Sex + Fare + Pclass,                           data = titanic_xdata, pruneCp = "auto",                           reportProgress = 0)
test_data = data.frame(Age = c(20,30), Sex = c('male','femal'))
predictions = rxPredict(rx_decision_tree, test_data)
head(predictions)
test_data = data.frame(Age = c(20,30), Sex = c('male','female')) predictions = rxPredict(rx_decision_tree, test_data) head(predictions)
titanic_data$Sex
str(titanic_data$Sex)
test_data = data.frame(Age = c(20,30), Sex = c(1,2)) predictions = rxPredict(rx_decision_tree, test_data) head(predictions)
test_data = data.frame(Age = c(20,30), Sex = c(2,1)) predictions = rxPredict(rx_decision_tree, test_data) head(predictions)
str(titanic_data$Sex)
levels(titanic_data$Sex)
labels(titanic_data$Sex)
factor(titanic_data$Sex)
str(titanic_data$Sex)
test_data = data.frame(Age = c(20,30), Sex = c("male","female")) predictions = rxPredict(rx_decision_tree, test_data) head(predictions)
test_data = data.frame(Age = c(20,30), Sex = c("female","male")) predictions = rxPredict(rx_decision_tree, test_data) head(predictions)
test_data = data.frame(Age = c(30,30), Sex = c("female","male")) predictions = rxPredict(rx_decision_tree, test_data) head(predictions)
test_data = data.frame(Age = c(30,30), Sex = c("s","s")) predictions = rxPredict(rx_decision_tree, test_data) head(predictions)
test_data = data.frame(Age = c(20,20), Sex = c("s","s")) predictions = rxPredict(rx_decision_tree, test_data) head(predictions)
test_data = data.frame(Age = c(10,10), Sex = c("s","s")) predictions = rxPredict(rx_decision_tree, test_data) head(predictions)
test_data = data.frame(Age = c(10,10), Sex = c("male","female")) predictions = rxPredict(rx_decision_tree, test_data) head(predictions)
test_data = data.frame(Age = c(30,20), Sex = c("male","female")) predictions = rxPredict(rx_decision_tree, test_data) head(predictions)
library(AzureML) ws <- workspace(id = "1f2b56bcf5fe4f3f9c32ee4371ca29ac", auth = "VsvDbAo+noBzPxphaoZZfdyY57T6QHDpdyM4P7WCAncofKL/dDUqbwLGBpSZfvKTScw/htjY5dnBTKAy2RN5QA==", api_endpoint = "https://europewest.studio.azureml.net", management_endpoint = "https://europewest.management.azureml.net") head(experiments(ws))
library(AzureML) ws <- workspace(id = "1f2b56bcf5fe4f3f9c32ee4371ca29ac", auth = "VsvDbAo+noBzPxphaoZZfdyY57T6QHDpdyM4P7WCAncofKL/dDUqbwLGBpSZfvKTScw/htjY5dnBTKAy2RN5QA==", api_endpoint = "https://europewest.studio.azureml.net", management_endpoint = "https://europewest.management.azureml.net")
head(experiments(ws))
data_file = "data/reg-data.csv" data = read.csv(data_file, header = TRUE) head(data)
model = lm(output ~ input, data = data) summary(model)
test = data.frame(input = c(1, 10, 100)) predict(model, test)
predictOutput = function(input) {     data = data.frame(c(input))     colnames(data) = c("input")     output = predict(model, data)     return(output) }
predictOutput(10)
rm(list = ls(all = TRUE))
Revo.version
Revo.home()
rxGetComputeContext()
titanic_csv = "data/titanic.csv"
col_classes = c(             "PassengerId" = "integer",             "Survived" = "factor",             "Pclass" = "factor",             "Sex" = "factor",             "Age" = "numeric",             "SibSp" = "integer",             "Parch" = "integer",             "Ticket" = "character",             "Fare" = "numeric",             "Cabin" = "character",             "Embarked" = "factor"             )
titanic_data = read.csv(titanic_csv, colClasses = col_classes) head(titanic_data)
titanic_xdf = "data/titanic.xdf"
rxImport(titanic_csv, titanic_xdf, colClasses = col_classes, overwrite = TRUE) titanic_xdata <- RxXdfData(titanic_xdf)
rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 1)
rxDataStep(titanic_xdata, titanic_xdata,   transforms = list(     Survived = factor(Survived, levels = 0:1, labels = c('No', 'Yes')),     FareToAgeRatio = Fare/Age     ),   overwrite = TRUE)
rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 1)
rxSummary(~ Age, titanic_xdata)
rxDataStep(titanic_xdata, titanic_xdata,            transformFunc = prepare_data,            overwrite = TRUE)
prepare_data <- function(data) {     age_mean = mean(data$Age, na.rm = TRUE)     data$Age[is.na(data$Age)] <- age_mean     return(data) } rxDataStep(titanic_xdata, titanic_xdata,            transformFunc = prepare_data,            overwrite = TRUE)
rxSummary( ~ Age, titanic_xdata)
rxsm = rxSummary( ~ Survived:Sex, titanic_xdata) genVsSurv <- tidyr::spread(rxsm$categorical[[1]], key = 'Sex', value = 'Counts') row.names(genVsSurv) <- rxs2[, 1] genVsSurv <- as.matrix(genVsSurv[, -1]) genVsSurv levelplot(prop.table(genVsSurv, 2), xlab = "Survived", ylab = "Gender",           main = "Survived vs. Gender")
rx_decision_tree <- rxDTree(Survived ~ Age + Sex + Fare + Pclass,                           data = titanic_xdata, pruneCp = "auto",                           reportProgress = 0)
prp(rxAddInheritance(rx_decision_tree)) fancyRpartPlot(rxAddInheritance(rx_decision_tree))
library(rpart) # Popular decision tree algorithm library(rattle) # Fancy tree plot library(rpart.plot) # Enhanced tree plots library(RColorBrewer) # Color selection for fancy tree plot library(party) # Alternative decision tree algorithm library(partykit) # Convert rpart object to BinaryTree library(caret) # Just a data source for this script
library(rpart) # Popular decision tree algorithm library(rattle) # Fancy tree plot library(rpart.plot) # Enhanced tree plots library(RColorBrewer) # Color selection for fancy tree plot library(party) # Alternative decision tree algorithm library(partykit) # Convert rpart object to BinaryTree library(caret) # Just a data source for this script
prp(rxAddInheritance(rx_decision_tree)) fancyRpartPlot(rxAddInheritance(rx_decision_tree))
test_data = data.frame(Age = c(30,20), Sex = c("male","female")) predictions = rxPredict(rx_decision_tree, test_data) head(predictions)
library(AzureML) ws <- workspace(id = "1f2b56bcf5fe4f3f9c32ee4371ca29ac", auth = "VsvDbAo+noBzPxphaoZZfdyY57T6QHDpdyM4P7WCAncofKL/dDUqbwLGBpSZfvKTScw/htjY5dnBTKAy2RN5QA==", api_endpoint = "https://europewest.studio.azureml.net", management_endpoint = "https://europewest.management.azureml.net")
head(experiments(ws))
data_file = "data/reg-data.csv" data = read.csv(data_file, header = TRUE) head(data)
model = lm(output ~ input, data = data) summary(model)
test = data.frame(input = c(1, 10, 100)) predict(model, test)
predictOutput = function(input) {     data = data.frame(c(input))     colnames(data) = c("input")     output = predict(model, data)     return(output) }
predictOutput(10)
api <- publishWebService(ws, fun = predictOutput, name = "aml-predictOutput",                           inputSchema = list(input = "numeric"),                           outputSchema = list(output = "numeric") )
api
api <- publishWebService(ws, fun = predictOutput, name = "aml-predictOutput",                           inputSchema = list(input = "numeric"),                           outputSchema = list(output = "numeric") ) api
ws <- workspace(id = "1f2b56bcf5fe4f3f9c32ee4371ca29ac", auth = "VsvDbAo+noBzPxphaoZZfdyY57T6QHDpdyM4P7WCAncofKL/dDUqbwLGBpSZfvKTScw/htjY5dnBTKAy2RN5QA==", api_endpoint = "https://europewest.studio.azureml.net", management_endpoint = "https://europewest.management.azureml.net")
head(experiments(ws))
data_file = "data/reg-data.csv" data = read.csv(data_file, header = TRUE) head(data)
model = lm(output ~ input, data = data) summary(model)
test = data.frame(input = c(1, 10, 100)) predict(model, test)
predictOutput = function(input) {     data = data.frame(c(input))     colnames(data) = c("input")     output = predict(model, data)     return(output) }
predictOutput(10)
rm(list = ls(all = TRUE))
library(rpart) # Popular decision tree algorithm library(rattle) # Fancy tree plot library(rpart.plot) # Enhanced tree plots library(RColorBrewer) # Color selection for fancy tree plot library(party) # Alternative decision tree algorithm library(partykit) # Convert rpart object to BinaryTree library(caret) # Just a data source for this script
library(rpart) # Popular decision tree algorithm library(rattle) # Fancy tree plot library(rpart.plot) # Enhanced tree plots library(RColorBrewer) # Color selection for fancy tree plot library(party) # Alternative decision tree algorithm library(partykit) # Convert rpart object to BinaryTree library(caret) # Just a data source for this script
Revo.version
Revo.home()
rxGetComputeContext()
titanic_csv = "data/titanic.csv"
col_classes = c(             "PassengerId" = "integer",             "Survived" = "factor",             "Pclass" = "factor",             "Sex" = "factor",             "Age" = "numeric",             "SibSp" = "integer",             "Parch" = "integer",             "Ticket" = "character",             "Fare" = "numeric",             "Cabin" = "character",             "Embarked" = "factor"             )
titanic_data = read.csv(titanic_csv, colClasses = col_classes) head(titanic_data)
titanic_xdf = "data/titanic.xdf" rxImport(titanic_csv, titanic_xdf, colClasses = col_classes, overwrite = TRUE) titanic_xdata <- RxXdfData(titanic_xdf)
rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 1)
rxSummary( ~ Survived, titanic_xdata)
rxDataStep(titanic_xdata, titanic_xdata,   transforms = list(     Survived = factor(Survived, levels = 0:1, labels = c('No', 'Yes')),     FareToAgeRatio = Fare/Age     ),   overwrite = TRUE)
rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 1)
rxSummary(~ Age, titanic_xdata)
prepare_data <- function(data) {     age_mean = mean(data$Age, na.rm = TRUE)     data$Age[is.na(data$Age)] <- age_mean     return(data) }
rxDataStep(titanic_xdata, titanic_xdata,            transformFunc = prepare_data,            overwrite = TRUE)
rxSummary( ~ Age, titanic_xdata)
rxsm = rxSummary( ~ Survived:Sex, titanic_xdata) genVsSurv <- tidyr::spread(rxsm$categorical[[1]], key = 'Sex', value = 'Counts') row.names(genVsSurv) <- rxs2[, 1] genVsSurv <- as.matrix(genVsSurv[, -1]) genVsSurv
rxsm = rxSummary( ~ Survived:Sex, titanic_xdata) genVsSurv <- tidyr::spread(rxsm$categorical[[1]], key = 'Sex', value = 'Counts') row.names(genVsSurv) <- genVsSurv[, 1] genVsSurv <- as.matrix(genVsSurv[, -1]) genVsSurv
rxsm = rxSummary( ~ Survived:Sex, titanic_xdata) genVsSurv <- tidyr::spread(rxsm$categorical[[1]], key = 'Sex', value = 'Counts') row.names(genVsSurv) <- genVsSurv[, 1] genVsSurv <- as.matrix(genVsSurv[, -1]) levelplot(prop.table(genVsSurv, 2), xlab = "Survived", ylab = "Gender",           main = "Survived vs. Gender")
rx_decision_tree <- rxDTree(Survived ~ Age + Sex + Fare + Pclass,                           data = titanic_xdata, pruneCp = "auto",                           reportProgress = 0)
prp(rxAddInheritance(rx_decision_tree)) fancyRpartPlot(rxAddInheritance(rx_decision_tree))
test_data = data.frame(Age = c(30,20), Sex = c("male","female")) predictions = rxPredict(rx_decision_tree, test_data) head(predictions)
rm(list = ls(all = TRUE))
titanic_csv = "data/titanic.csv"
col_classes = c(             "PassengerId" = "integer",             "Survived" = "factor",             "Pclass" = "factor",             "Sex" = "factor",             "Age" = "numeric",             "SibSp" = "integer",             "Parch" = "integer",             "Ticket" = "character",             "Fare" = "numeric",             "Cabin" = "character",             "Embarked" = "factor"             )
titanic_data = read.csv(titanic_csv, colClasses = col_classes) head(titanic_data)
titanic_xdf = "data/titanic.xdf" rxImport(titanic_csv, titanic_xdf, colClasses = col_classes, overwrite = TRUE) titanic_xdata <- RxXdfData(titanic_xdf)
rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 1) rxSummary(~ Age, titanic_xdata)
rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 0) rxSummary(~ Age, titanic_xdata)
prepare_data <- function(data) {     #fix factor levels in Survived     data$Survived = factor(data$Survived, levels = 0:1, labels = c('No', 'Yes'))     #create a new variable FareToAgeRatio     data$FareToAgeRatio = data$Fare / data$Age     #handling missing values in Age      age_mean = mean(data$Age, na.rm = TRUE)     data$Age[is.na(data$Age)] <- age_mean     return(data) }
rxDataStep(titanic_xdata, titanic_xdata,            transformFunc = prepare_data,            overwrite = TRUE)
rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 0) rxSummary( ~ Age, titanic_xdata)
rxsm = rxSummary( ~ Survived:Sex, titanic_xdata) genVsSurv <- tidyr::spread(rxsm$categorical[[1]], key = 'Sex', value = 'Counts') row.names(genVsSurv) <- genVsSurv[, 1] genVsSurv <- as.matrix(genVsSurv[, -1]) levelplot(prop.table(genVsSurv, 2), xlab = "Survived", ylab = "Gender",           main = "Survived vs. Gender")
rx_decision_tree <- rxDTree(Survived ~ Age + Sex + Fare + Pclass,                           data = titanic_xdata, pruneCp = "auto",                           reportProgress = 0)
prp(rxAddInheritance(rx_decision_tree)) fancyRpartPlot(rxAddInheritance(rx_decision_tree))
test_data = data.frame(Age = c(30,20), Sex = c("male","female")) predictions = rxPredict(rx_decision_tree, test_data) head(predictions)
titanic_xdf = "data/titanic.xdf" rxImport(titanic_csv, titanic_xdf, colClasses = col_classes, overwrite = TRUE) titanic_xdata <- RxXdfData(titanic_xdf)
rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 2) rxSummary(~ Age, titanic_xdata)
prepare_data <- function(data) {     #fix factor levels in Survived     data$Survived = factor(data$Survived, levels = 0:1, labels = c('No', 'Yes'))     #create a new variable FareToAgeRatio     data$FareToAgeRatio = data$Fare / data$Age     #handling missing values in Age      age_mean = mean(data$Age, na.rm = TRUE)     data$Age[is.na(data$Age)] <- age_mean     return(data) }
rxDataStep(titanic_xdata, titanic_xdata,            transformFunc = prepare_data,            overwrite = TRUE) rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 0) rxSummary( ~ Age, titanic_xdata)
rm(list = ls(all = TRUE))
library(AzureML) library(help = AzureML)
ls("package:AzureML")
Revo.version
Revo.version Revo.home()
rxGetComputeContext()
library(AzureML)
ls("package:AzureML")
ws <- workspace(id = "1f2b56bcf5fe4f3f9c32ee4371ca29ac", auth = "VsvDbAo+noBzPxphaoZZfdyY57T6QHDpdyM4P7WCAncofKL/dDUqbwLGBpSZfvKTScw/htjY5dnBTKAy2RN5QA==", api_endpoint = "https://europewest.studio.azureml.net", management_endpoint = "https://europewest.management.azureml.net")
head(experiments(ws))
data_file = "data/reg-data.csv" data = read.csv(data_file, header = TRUE) head(data)
model = lm(output ~ input, data = data) summary(model)
predictOutput = function(input) {     data = data.frame(c(input))     colnames(data) = c("input")     output = predict(model, data)     return(output) }
predictOutput(10)
predictOutput(20)
api <- publishWebService(ws, fun = predictOutput, name = "aml-predictOutput",                           inputSchema = list(input = "numeric"),                           outputSchema = list(output = "numeric") )
api
predictOutput = function(input) {     #data = data.frame(c(input))     #colnames(data) = c("input")     #output = predict(model, data)     output = input * 10     return(output) } # test the prediction function predictOutput(20)
api <- publishWebService(ws, fun = predictOutput, name = "aml-predictOutput",                           inputSchema = list(input = "numeric"),                           outputSchema = list(output = "numeric") )
endpoint = endpoints(ws,api)
test_data <- data.frame(x = 10:50) consume(api, test_data)
test_data <- data.frame(x = 10:50, colnames = c('input')) consume(api, test_data)
test_data
consume(api, test_data)
test_data
test_data <- data.frame(x = 10:50, colClasses = c('input' = 'numeric')) test_data
test_data <- data.frame(input = 10:50) test_data
consume(api, test_data)
test_data
consume(api, test_data)
consume
consume(api, test_data)
df <- data.frame(input = 10:50) df consume(api, df)
consume(api, test_data)
api <- publishWebService(ws,                           fun = predictOutput,                          name = "aml-predictOutput",                          inputSchema = list(input = "numeric"),                           outputSchema = list(output = "numeric") )
api
test_data <- data.frame(input = 10:50) consume(api, test_data)
rm(list = ls(all = TRUE))
rm(list = ls(all = TRUE)) library(AzureML)
ws <- workspace(id = "1f2b56bcf5fe4f3f9c32ee4371ca29ac", auth = "VsvDbAo+noBzPxphaoZZfdyY57T6QHDpdyM4P7WCAncofKL/dDUqbwLGBpSZfvKTScw/htjY5dnBTKAy2RN5QA==", api_endpoint = "https://europewest.studio.azureml.net", management_endpoint = "https://europewest.management.azureml.net")
head(experiments(ws))
data_file = "data/reg-data.csv" data = read.csv(data_file, header = TRUE) head(data)
model = lm(output ~ input, data = data) summary(model) # create a prediction function predictOutput = function(input) {     #data = data.frame(c(input))     colnames(data) = c("input")     output = predict(model, data)     return(output) } # test the prediction function predictOutput(20)
predictOutput(20)
test_data = data.frame(input = c(10, 20, 30)) predictOutput(test_data)
predictOutput(test_data)
test_data
predictOutput(test_data)
test_data = data.frame(input = c(10)) test_data predictOutput(test_data)
predictOutput = function(input) {     #data = data.frame(c(input))     # colnames(data) = c("input")     output = predict(model, data)     return(output) }
test_data = data.frame(input = c(10)) test_data predictOutput(test_data)
predictOutput = function(input) {     #data = data.frame(c(input))     # colnames(data) = c("input")     output = predict(model, input)     return(output) } # test the prediction function test_data = data.frame(input = c(10)) test_data predictOutput(test_data)
api <- publishWebService(ws,                           fun = predictOutput,                          name = "aml-predictOutput",                          inputSchema = list(input = "numeric"),                           outputSchema = list(output = "numeric") )
api
consume(api, test_data)
head(experiments(ws))
#install.packages("AzureML") rm(list = ls(all = TRUE)) library(AzureML) # list AzureML functions ls("package:AzureML") # connec to your Azure ML workspace ws <- workspace(id = "1f2b56bcf5fe4f3f9c32ee4371ca29ac", auth = "VsvDbAo+noBzPxphaoZZfdyY57T6QHDpdyM4P7WCAncofKL/dDUqbwLGBpSZfvKTScw/htjY5dnBTKAy2RN5QA==", api_endpoint = "https://europewest.studio.azureml.net", management_endpoint = "https://europewest.management.azureml.net") # list the experiements in your workspace head(experiments(ws)) # load a data frame data_file = "data/reg-data.csv" data = read.csv(data_file, header = TRUE) head(data) # build a linear reg. model and show its summary model = lm(output ~ input, data = data) summary(model) # create a prediction function predictOutput = function(input) {     data = data.frame(c(input))     colnames(data) = c("input")     output = predict(model, data)     return(output) } # test the prediction function predictOutput(20)
out = predictOutput(20) str(out)
predictOutput = function(input) {     data = data.frame(c(input))     colnames(data) = c("input")     output = predict(model, data)     output = data.Frame(output = c(output))     return(output) }
out = predictOutput(20) str(out)
predictOutput = function(input) {     data = data.frame(c(input))     colnames(data) = c("input")     output = predict(model, data)     output = data.frame(output = c(output))     return(output) } # test the prediction function out = pred
predictOutput = function(input) {     data = data.frame(c(input))     colnames(data) = c("input")     output = predict(model, data)     output = data.frame(output = c(output))     return(output) } # test the prediction function out = predictOutput(20) str(out)
api <- publishWebService(ws,                           fun = predictOutput,                          name = "aml-predictOutput",                          inputSchema = list(input = "numeric"),                           outputSchema = list(output = "numeric") ) # get the API info api
consume(api, data.frame(c(10)))
consume(api, data.frame(input = c(10)))
predictOutput = function(input) {     print('predictOutput started')     data = data.frame(c(input))     colnames(data) = c("input")     output = predict(model, data)     output = data.frame(output = c(output)) print('predictOutput started')     return(output) } # test the prediction function out = predictOutput(20)
predictOutput(20)
api <- publishWebService(ws,                           fun = predictOutput,                          name = "aml-predictOutput",                          inputSchema = list(input = "numeric"),                           outputSchema = list(output = "numeric") ) # get the API info api
consume(api, data.frame(input = c(10)))
predictOutput = function(input) {     data = data.frame(c(input))     colnames(data) = c("input")     output = predict(model, data)     return(output) }
predictOutput(20)
api <- publishWebService(ws,                           fun = predictOutput,                          name = "aml-predictOutput" )
api <- publishWebService(ws,                           fun = predictOutput,                          name = "aml-predictOutput",                          inputSchema = list(input = "numeric") )
api <- publishWebService(ws,                           fun = predictOutput,                          name = "aml-predictOutput",                          inputSchema = list(input = "numeric") )
predictOutput(20)
rm(list = ls(all = TRUE)) library(AzureML) # list AzureML functions ls("package:AzureML") # connec to your Azure ML workspace ws <- workspace(id = "1f2b56bcf5fe4f3f9c32ee4371ca29ac", auth = "VsvDbAo+noBzPxphaoZZfdyY57T6QHDpdyM4P7WCAncofKL/dDUqbwLGBpSZfvKTScw/htjY5dnBTKAy2RN5QA==", api_endpoint = "https://europewest.studio.azureml.net", management_endpoint = "https://europewest.management.azureml.net") # list the experiements in your workspace head(experiments(ws)) # load a data frame data_file = "data/reg-data.csv" data = read.csv(data_file, header = TRUE) head(data)
model = lm(output ~ input, data = data) summary(model) # create a prediction function predictOutput = function(input) {     data = data.frame(c(input))     colnames(data) = c("input")     output = predict(model, data)     return(output) } # test the prediction function predictOutput(20)
api <- publishWebService(ws,                           fun = predictOutput,                          name = "aml-predictOutput",                          inputSchema = list(input = "numeric") )
api <- publishWebService(ws,                           fun = predictOutput,                          name = "aml-predictOutput",                          inputSchema = list(input = "numeric"),                           outputSchema= list(output = "numeric") )
api
api <- publishWebService(ws,                           fun = predictOutput,                          name = "aml-predictOutput",                          inputSchema = list(input = "numeric")#,                           #outputSchema= list(output = "numeric") )
intput_data = data.frame(c(20)) colnames(intput_data) = c("input") intput_data
predictOutput = function(input_data) {     output = predict(model, input_data)     return(output) } intput_data = data.frame(c(20)) colnames(intput_data) = c("input") intput_data # test the prediction function predictOutput(intput_data)
predictOutput(intput_data)
intput_data = data.frame(c(20,30)) colnames(intput_data) = c("input") intput_data
predictOutput(intput_data)
predictOutput = function(input_data) {     output = predict(model, input_data)     return(output) }
api <- publishWebService(ws,                           fun = predictOutput,                          name = "aml-predictOutput",                          inputSchema = intput_data  #list(input = "numeric")#,                           #outputSchema= list(output = "numeric") )
api
consume(api, data.frame(input = c(10)))
consume(api, data.frame(input = c(10,20)))
predictOutput = function(input_data) {     output = predict(model, input_data)     return(output) }
intput_data = data.frame(input = c(20, 30)) predictOutput(intput_data)
api <- publishWebService(ws,                           fun = predictOutput,                          name = "aml-predictOutput",                          inputSchema = intput_data,                           outputSchema = list(output = "numeric") )
consume(api, data.frame(input = c(10)))
predictOutput = function(input_data) {     output_data = predict(model, input_data)     return(output_data) }
intput_data = data.frame(input = c(20, 30)) output_data = predictOutput(intput_data)
api <- publishWebService(ws,                           fun = predictOutput,                          name = "aml-predictOutput",                          inputSchema = output_data )
predictOutput = function(input_data) {     output_data = predict(model, input_data)     output_data = data.frame(output = output_data)     return(output_data) }
intput_data = data.frame(input = c(20, 30)) output_data = predictOutput(intput_data)
api <- publishWebService(ws,                           fun = predictOutput,                          name = "aml-predictOutput",                          inputSchema = output_data )
api <- publishWebService(ws,                           fun = predictOutput,                          name = "aml-predictOutput",                          inputSchema = intput_data,                          outputSchema = output_data )
consume(api, data.frame(input = c(10)))
predictOutput = function(input_data) {     output_data = predict(model, input_data)     return(output_data) }
intput_data = data.frame(input = c(20, 30)) predictOutput(intput_data)
predictOutput = function(input_data) {     output_data = predict(model, input_data)     return(list(output = output_data)) }
intput_data = data.frame(input = c(20, 30)) predictOutput(intput_data)
api <- publishWebService(ws,                           fun = predictOutput,                          name = "aml-predictOutput",                          inputSchema = intput_data,                          outputSchema = list(output = "numeric") )
consume(api, data.frame(input = c(10)))
predictOutput = function(input_data) {     output_data = predict(model, input_data)     return(output_data) }
intput_data = data.frame(input = c(20, 30)) predictOutput(intput_data)
api <- publishWebService(ws,                           fun = predictOutput,                          name = "aml-predictOutput",                          inputSchema = intput_data )
consume(api, data.frame(input = c(10)))
rm(list = ls(all = TRUE))
library(AzureML)
ls("package:AzureML")
ws <- workspace(id = "1f2b56bcf5fe4f3f9c32ee4371ca29ac", auth = "VsvDbAo+noBzPxphaoZZfdyY57T6QHDpdyM4P7WCAncofKL/dDUqbwLGBpSZfvKTScw/htjY5dnBTKAy2RN5QA==", api_endpoint = "https://europewest.studio.azureml.net", management_endpoint = "https://europewest.management.azureml.net")
head(experiments(ws))
data_file = "data/reg-data.csv" data = read.csv(data_file, header = TRUE) head(data)
model = lm(output ~ input, data = data) summary(model)
predictOutput = function(input_data) {     output_data = predict(model, input_data)     return(output_data) }
intput_data = data.frame(input = c(20, 30)) predictOutput(intput_data)
api <- publishWebService(ws,                           fun = predictOutput,                          name = "aml-predictOutput",                          inputSchema = intput_data )
api
consume(api, data.frame(input = c(10)))
consume(api, data.frame(input = c(10,20)))
rm(list = ls(all = TRUE))
library(rpart) # Popular decision tree algorithm library(rattle) # Fancy tree plot library(rpart.plot) # Enhanced tree plots library(RColorBrewer) # Color selection for fancy tree plot library(party) # Alternative decision tree algorithm library(partykit) # Convert rpart object to BinaryTree library(caret) # Just a data source for this script
library(rpart) # Popular decision tree algorithm library(rattle) # Fancy tree plot library(rpart.plot) # Enhanced tree plots library(RColorBrewer) # Color selection for fancy tree plot library(party) # Alternative decision tree algorithm library(partykit) # Convert rpart object to BinaryTree library(caret) # Just a data source for this script
Revo.version
Revo.version Revo.home()
rxGetComputeContext()
titanic_csv = "data/titanic.csv"
col_classes = c(             "PassengerId" = "integer",             "Survived" = "factor",             "Pclass" = "factor",             "Sex" = "factor",             "Age" = "numeric",             "SibSp" = "integer",             "Parch" = "integer",             "Ticket" = "character",             "Fare" = "numeric",             "Cabin" = "character",             "Embarked" = "factor"             )
titanic_data = read.csv(titanic_csv, colClasses = col_classes) head(titanic_data)
titanic_xdf = "data/titanic.xdf" rxImport(titanic_csv, titanic_xdf, colClasses = col_classes, overwrite = TRUE) titanic_xdata <- RxXdfData(titanic_xdf)
rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 2) rxSummary(~ Age, titanic_xdata)
prepare_data <- function(data) {     # fix factor levels in Survived     data$Survived = factor(data$Survived, levels = 0:1, labels = c('No', 'Yes'))     # create a new variable FareToAgeRatio     data$FareToAgeRatio = data$Fare / data$Age     # handling missing values in Age      age_mean = mean(data$Age, na.rm = TRUE)     data$Age[is.na(data$Age)] <- age_mean     return(data) }
rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 0) rxSummary( ~ Age, titanic_xdata)
rxDataStep(titanic_xdata, titanic_xdata,            transformFunc = prepare_data,            overwrite = TRUE)
rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 0) rxSummary( ~ Age, titanic_xdata)
rxsm = rxSummary( ~ Survived:Sex, titanic_xdata) genVsSurv <- tidyr::spread(rxsm$categorical[[1]], key = 'Sex', value = 'Counts') row.names(genVsSurv) <- genVsSurv[, 1] genVsSurv <- as.matrix(genVsSurv[, -1]) levelplot(prop.table(genVsSurv, 2), xlab = "Survived", ylab = "Gender",           main = "Survived vs. Gender")
rx_decision_tree <- rxDTree(Survived ~ Age + Sex + Fare + Pclass,                           data = titanic_xdata, pruneCp = "auto",                           reportProgress = 0)
prp(rxAddInheritance(rx_decision_tree)) fancyRpartPlot(rxAddInheritance(rx_decision_tree))
test_data = data.frame(Age = c(30,20), Sex = c("male","female")) predictions = rxPredict(rx_decision_tree, test_data) head(predictions)
library(AzureML)
ls("package:AzureML")
ws <- workspace(id = "1f2b56bcf5fe4f3f9c32ee4371ca29ac", auth = "VsvDbAo+noBzPxphaoZZfdyY57T6QHDpdyM4P7WCAncofKL/dDUqbwLGBpSZfvKTScw/htjY5dnBTKAy2RN5QA==", api_endpoint = "https://europewest.studio.azureml.net", management_endpoint = "https://europewest.management.azureml.net")
head(experiments(ws))
data_file = "data/reg-data.csv" data = read.csv(data_file, header = TRUE) head(data)
model = lm(output ~ input, data = data) summary(model)
predictOutput = function(input_data) {     output_data = predict(model, input_data)     return(output_data) }
intput_data = data.frame(input = c(20, 30)) predictOutput(intput_data)
api <- publishWebService(ws,                           fun = predictOutput,                          name = "aml-predictOutput",                          inputSchema = intput_data )
api
consume(api, data.frame(input = c(10)))
rm(list = ls(all = TRUE))
library(rpart) # Popular decision tree algorithm library(rattle) # Fancy tree plot library(rpart.plot) # Enhanced tree plots library(RColorBrewer) # Color selection for fancy tree plot library(party) # Alternative decision tree algorithm library(partykit) # Convert rpart object to BinaryTree library(caret) # Just a data source for this script
library(rpart) # Popular decision tree algorithm library(rattle) # Fancy tree plot library(rpart.plot) # Enhanced tree plots library(RColorBrewer) # Color selection for fancy tree plot library(party) # Alternative decision tree algorithm library(partykit) # Convert rpart object to BinaryTree library(caret) # Just a data source for this script
Revo.version Revo.home()
rxGetComputeContext()
titanic_csv = "data/titanic.csv" # dataset column names and types col_classes = c(             "PassengerId" = "integer",             "Survived" = "factor",             "Pclass" = "factor",             "Sex" = "factor",             "Age" = "numeric",             "SibSp" = "integer",             "Parch" = "integer",             "Ticket" = "character",             "Fare" = "numeric",             "Cabin" = "character",             "Embarked" = "factor"             )
titanic_data = read.csv(titanic_csv, colClasses = col_classes) head(titanic_data)
titanic_xdf = "data/titanic.xdf" rxImport(titanic_csv, titanic_xdf, colClasses = col_classes, overwrite = TRUE) titanic_xdata <- RxXdfData(titanic_xdf)
rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 2) rxSummary(~ Age, titanic_xdata)
prepare_data <- function(data) {     # fix factor levels in Survived     data$Survived = factor(data$Survived, levels = 0:1, labels = c('No', 'Yes'))     # create a new variable FareToAgeRatio     data$FareToAgeRatio = data$Fare / data$Age     # handling missing values in Age      age_mean = mean(data$Age, na.rm = TRUE)     data$Age[is.na(data$Age)] <- age_mean     return(data) }
rxDataStep(titanic_xdata, titanic_xdata,            transformFunc = prepare_data,            overwrite = TRUE)
rxGetInfo(titanic_xdata, getVarInfo = TRUE, numRows = 0) rxSummary( ~ Age, titanic_xdata)
rxsm = rxSummary( ~ Survived:Sex, titanic_xdata) genVsSurv <- tidyr::spread(rxsm$categorical[[1]], key = 'Sex', value = 'Counts') row.names(genVsSurv) <- genVsSurv[, 1] genVsSurv <- as.matrix(genVsSurv[, -1]) levelplot(prop.table(genVsSurv, 2), xlab = "Survived", ylab = "Gender",           main = "Survived vs. Gender")
rx_decision_tree <- rxDTree(Survived ~ Age + Sex + Fare + Pclass,                           data = titanic_xdata, pruneCp = "auto",                           reportProgress = 0)
prp(rxAddInheritance(rx_decision_tree)) fancyRpartPlot(rxAddInheritance(rx_decision_tree))
test_data = data.frame(Age = c(30,20), Sex = c("male","female")) predictions = rxPredict(rx_decision_tree, test_data) head(predictions)
